{"version":3,"sources":["components/Logo/brain.svg","components/FaceRecognition/empty.png","components/Navigation/Navigation.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","components/FaceRecognition/FaceRecognition.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","className","Logo","options","max","style","height","width","paddingTop","src","brain","alt","ImageLinkForm","onInputChange","onSubmit","type","placeholder","onChange","onClick","Rank","FaceRecognition","imageUrl","emptyImage","app","Clarifai","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","event","setState","input","target","state","models","predict","then","response","console","log","outputs","data","regions","length","region_info","bounding_box","err","alert","this","params","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,yQCW5BC,G,YARI,WAClB,OACC,6BACC,uBAAGC,UAAU,0CAAb,e,0CCWYC,EAZF,WACZ,OACC,yBAAKD,UAAU,WACd,kBAAC,IAAD,CAAMA,UAAU,oBAAoBE,QAAS,CAAEC,IAAM,IAAMC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,MACtF,yBAAKN,UAAU,kBACf,yBAAKI,MAAO,CAACG,WAAW,QAAQC,IAAKC,IAAOC,IAAI,aCatCC,G,MAlBO,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,cAAeC,EAAa,EAAbA,SACtC,OACC,6BACC,6BACC,uBAAGb,UAAU,MACX,uEAEF,yBAAKA,UAAU,UACd,yBAAKA,UAAU,gCACd,2BAAOA,UAAU,sBAAsBc,KAAK,OAAOC,YAAY,YAAYC,SAAUJ,IACrF,4BAAQZ,UAAU,sDAAsDiB,QAASJ,GAAjF,gBCASK,EAbF,WACZ,OACC,6BACC,yBAAKlB,UAAU,YACd,qCAED,yBAAKA,UAAU,YACd,Q,iBCWWmB,EAfS,SAAC,GAAe,IAAdC,EAAa,EAAbA,SAMzB,OAJIA,IACHA,EAASC,KAIT,yBAAKrB,UAAU,aACd,yBAAKA,UAAU,gBACd,yBAAKQ,IAAKY,EAAUV,IAAI,eAAeJ,MAAM,QAAQD,OAAO,Y,yBCH1DiB,EAAM,I,OAAIC,EAASC,KAAI,CAC3BC,OAAQ,qCAuDKD,E,YAnDf,aAAc,IAAD,8BACX,+CAOAE,iBAAkB,CAChBC,UAAW,CACTC,OAAQ,CACNC,MAAO,GACPC,QAAS,CACPC,QAAQ,EACRC,WAAY,QAdT,EAoBXpB,cAAgB,SAACqB,GACf,EAAKC,SAAS,CAACC,MAAOF,EAAMG,OAAOP,SArB1B,EAuBXhB,SAAW,SAACoB,GACV,EAAKC,SAAS,CAACd,SAAU,EAAKiB,MAAMF,QACpCb,EAAIgB,OAAOC,QAAQ,mCAAoC,EAAKF,MAAMF,OAAQK,MACxE,SAASC,GACPC,QAAQC,IAAR,4CAAiDF,EAASG,QAAQ,GAAGC,KAAKC,QAAQC,SAClFL,QAAQC,IAAIF,EAASG,QAAQ,GAAGC,KAAKC,QAAQ,GAAGE,YAAYC,iBAE9D,SAASC,GACPC,MAAM,mBACNC,KAAKlB,SAAS,CAACC,MAAO,GAAIf,SAAU,KACpCsB,QAAQC,IAAI,iBA/BlB,EAAKN,MAAQ,CACXF,MAAM,GACNf,SAAS,IAJA,E,sEAsCT,OACA,yBAAKpB,UAAU,OACb,kBAAC,IAAD,CAAWqD,OAAQD,KAAK1B,iBAAkB1B,UAAU,cAClD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAeY,cAAewC,KAAKxC,cAAeC,SAAUuC,KAAKvC,WACjE,kBAAC,EAAD,CAAiBO,SAAUgC,KAAKf,MAAMjB,gB,GA9C5BkC,a,MCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.f6908249.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.cc5b43f6.svg\";","module.exports = __webpack_public_path__ + \"static/media/empty.257517e0.png\";","import React from 'react';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = () =>{\r\n\treturn(\r\n\t\t<nav>\r\n\t\t\t<p className='f3 link dim black underline p3 pointer' >Sign Out</p>\r\n\t\t</nav>\r\n\t)\r\n}\r\n\r\nexport default Navigation;\r\n\r\n","import React from 'react';\r\nimport Tilt from 'react-tilt'\r\nimport './Logo.css'\r\nimport brain from './brain.svg'\r\n\r\nconst Logo = () =>{\r\n\treturn(\r\n\t\t<div className='ma4 mt0'>\r\n\t\t\t<Tilt className=\"Tilt br2 shadow-2\" options={{ max : 25 }} style={{ height: 150, width: 150 }} >\r\n \t\t\t\t<div className=\"Tilt-inner pa3\">\r\n\t\t\t\t\t<img style={{paddingTop:'25px'}}src={brain} alt=\"logo\"/>\r\n\t\t\t\t</div>\r\n\t\t\t</Tilt>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Logo;\r\n\r\n","import React from 'react';\r\n\r\nimport './ImageLinkForm.css'\r\n\r\n\r\nconst ImageLinkForm = ({onInputChange, onSubmit}) =>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<div>\r\n\t\t\t\t<p className='f3'>\r\n\t\t\t\t\t{'This magic Brain will detect faces in your pictures. Give it a try!'}\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className='center'>\r\n\t\t\t\t\t<div className='form center pa4 br3 shadow-5'>\r\n\t\t\t\t\t\t<input className=\"f4 pad2 w-70 center\" type=\"text\" placeholder=\"Image URL\" onChange={onInputChange}/>\r\n\t\t\t\t\t\t<button className=\"w-30 grow f4 link ph3 pv2 dib white bg-light-purple\" onClick={onSubmit}>Detect</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ImageLinkForm;\r\n\r\n","import React from 'react';\r\n\r\nconst Rank = () =>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<div className=\"white f3\">\r\n\t\t\t{\"Jane Doe, your current rank is...\"}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"white f1\">\r\n\t\t\t{\"#8\"}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Rank;\r\n\r\n","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport emptyImage from './empty.png';\r\n\r\n\r\nconst FaceRecognition = ({imageUrl}) =>{\r\n\r\n\tif(!imageUrl){\r\n\t\timageUrl=emptyImage;\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div className='center ma'>\r\n\t\t\t<div className='absolute mt2'>\r\n\t\t\t\t<img src={imageUrl} alt=\"tested image\" width='500px' height='auto'/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default FaceRecognition;\r\n\r\n ","import React, {Component} from 'react';\nimport './App.css';\nimport Navigation from '../components/Navigation/Navigation';\nimport Logo from '../components/Logo/Logo';\nimport ImageLinkForm from '../components/ImageLinkForm/ImageLinkForm';\nimport Rank from '../components/Rank/Rank';\nimport FaceRecognition from '../components/FaceRecognition/FaceRecognition';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\n\n//aefe9fbcfa8a40dbb6da47a65ccd0071\nconst app = new Clarifai.App({\n  apiKey: 'aefe9fbcfa8a40dbb6da47a65ccd0071'\n });\n\nclass App extends Component {\nconstructor(){\n  super();\n  this.state = {\n    input:'',\n    imageUrl:''\n  }\n}\n\n  particlesOptions ={\n    particles: {\n      number: {\n        value: 80,\n        density: {\n          enable: true,\n          value_area: 300\n        }\n      }\n    }\n  }\n  //Clarifai.FACE_DETECT_MODEL\n  onInputChange = (event) =>{\n    this.setState({input: event.target.value});\n  }\n  onSubmit = (event) =>{\n    this.setState({imageUrl: this.state.input});\n    app.models.predict(\"a403429f2ddf4b49b307e318f00e528b\", this.state.input ).then(\n      function(response) {\n        console.log(`Quantidade de rostos encontrados: ${response.outputs[0].data.regions.length}`);\n        console.log(response.outputs[0].data.regions[0].region_info.bounding_box);\n      },\n      function(err) {\n        alert('invalid image!!');\n        this.setState({input: '', imageUrl: ''});\n        console.log('erroooo!!');\n      }\n    );\n  }\n  render(){\n    return(\n    <div className=\"App\">\n      <Particles params={this.particlesOptions} className='particles'/>\n        <Navigation />\n        <Logo />\n        <Rank />\n        <ImageLinkForm onInputChange={this.onInputChange} onSubmit={this.onSubmit} />\n        <FaceRecognition imageUrl={this.state.imageUrl}/>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}